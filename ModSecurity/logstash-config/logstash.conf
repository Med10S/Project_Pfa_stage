input {
  beats {
    port => 5044
  }
}

filter {
  if [logtype] == "modsecurity" {
    grok {
      match => { 
        "message" => "%{COMBINEDAPACHELOG}" 
      }
    }
    
    # Extraction des alertes ModSecurity
    if [message] =~ /ModSecurity/ {
      grok {
        match => {
          "message" => "\[(?<modsec_timestamp>[^\]]+)\] \[(?<modsec_level>[^\]]+)\] \[client (?<client_ip>[^\]]+)\] (?<modsec_message>.*)"
        }
      }
      
      # Extraction de l'ID de règle
      if [modsec_message] {
        grok {
          match => {
            "modsec_message" => "id \"(?<rule_id>\d+)\""
          }
        }
      }
      
      mutate {
        add_tag => ["modsecurity_alert"]
        add_field => {
          "alert_type" => "waf"
          "severity" => "high"
          "detection_engine" => "modsecurity"
        }
      }
    }
  }
  
  if [logtype] == "modsecurity-audit" {
    # Traitement des logs d'audit JSON
    json {
      source => "message"
    }
    
    if [transaction] {
      mutate {
        add_field => {
          "transaction_id" => "%{[transaction][id]}"
          "client_ip" => "%{[transaction][client_ip]}"
          "server_id" => "%{[transaction][server_id]}"
        }
      }
    }
    
    # Classification des attaques XSS
    if [messages] {
      ruby {
        code => '
          messages = event.get("messages")
          if messages.is_a?(Array)
            messages.each do |msg|
              if msg["msg"] && msg["msg"].include?("XSS")
                event.set("attack_type", "xss")
                event.set("attack_classification", "cross_site_scripting")
                event.set("risk_level", "high")
              end
            end
          end
        '
      }
    }
  }
  
  # Enrichissement avec informations géographiques
  if [client_ip] and [client_ip] !~ /^(10\.|192\.168\.|172\.(1[6-9]|2[0-9]|3[01])\.)/ {
    geoip {
      source => "client_ip"
      target => "geoip"
    }
  }
  
  # Ajout de timestamp standardisé
  date {
    match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
  }
}

output {
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "modsecurity-parsed-%{+YYYY.MM.dd}"
  }
  
  # Envoi vers webhook pour n8n (alertes critiques uniquement)
  if "modsecurity_alert" in [tags] and [severity] == "high" {
    http {
      url => "http://your-n8n-instance:5678/webhook/modsecurity-xss"
      http_method => "post"
      format => "json"
      headers => {
        "Content-Type" => "application/json"
        "X-Source" => "ModSecurity-WAF"
      }
    }
  }
  
  stdout { codec => rubydebug }
}