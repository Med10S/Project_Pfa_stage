# Nginx configuration for ModSecurity WAF with proper backend routing

# Real IP configuration for multi-hop network topology
# Trust proxy IPs from all network layers:
# - Docker bridge networks (172.20.0.0/16)  
# - VM host-only network (192.168.15.0/24)
# - Local WiFi network (192.168.1.0/24)
set_real_ip_from 172.20.0.0/16;     # Docker bridge network
set_real_ip_from 172.16.0.0/12;     # All Docker networks  
set_real_ip_from 192.168.15.0/24;   # VM host-only network
set_real_ip_from 192.168.1.0/24;    # WiFi network
set_real_ip_from 10.0.0.0/8;        # Private networks
real_ip_header X-Forwarded-For;
real_ip_recursive on;

map $http_upgrade $connection_upgrade {
    default upgrade;
    '' close;
}

# Increase buffer sizes to handle large headers
large_client_header_buffers 4 32k;
client_header_buffer_size 8k;
proxy_buffer_size 8k;
proxy_buffers 8 8k;

server {
    listen 80 default_server;
    server_name modsecurity-soar.local;
    
    # Set correct upstream to webapp service
    set $upstream http://webapp:80;
    set $always_redirect off;

    location / {
        client_max_body_size 10m;

        if ($always_redirect = on) {
            return 301 https://$host$request_uri;
        }

        # Proxy headers - prevent loops by using clean forwarded headers
        proxy_set_header Host $host;
        proxy_set_header Proxy "";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header X-REAL-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_connect_timeout 60s;
        proxy_read_timeout 36000s;
        proxy_redirect off;
        proxy_pass_header Authorization;
        
        # Proxy to webapp service
        proxy_pass $upstream;
    }

    # Health check endpoint
    location /server-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}

server {
    listen 443 ssl;
    server_name modsecurity-soar.local;
    
    # Set correct upstream to webapp service
    set $upstream http://webapp:80;

    # SSL Configuration
    ssl_certificate /etc/ssl/certs/server.crt;
    ssl_certificate_key /etc/ssl/certs/server.key;
    ssl_session_timeout 1d;
    ssl_session_cache shared:MozSSL:10m;
    ssl_session_tickets off;
    ssl_dhparam /etc/ssl/certs/dhparam-2048.pem;

    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;
    ssl_prefer_server_ciphers off;

    location / {
        client_max_body_size 10m;

        # Proxy headers - prevent loops by using clean forwarded headers
        proxy_set_header Host $host;
        proxy_set_header Proxy "";
        proxy_set_header Upgrade $http_upgrade;
        proxy_set_header Connection $connection_upgrade;
        proxy_set_header X-REAL-IP $remote_addr;
        proxy_set_header X-Forwarded-For $remote_addr;
        proxy_set_header X-Forwarded-Port $server_port;
        proxy_set_header X-Forwarded-Proto $scheme;

        proxy_http_version 1.1;
        proxy_buffering off;
        proxy_connect_timeout 60s;
        proxy_read_timeout 36000s;
        proxy_redirect off;
        proxy_pass_header Authorization;
        
        # Proxy to webapp service
        proxy_pass $upstream;
    }

    # Health check endpoint
    location /server-status {
        stub_status on;
        access_log off;
        allow 127.0.0.1;
        deny all;
    }
}
