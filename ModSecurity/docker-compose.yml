

services:
  # ModSecurity avec Apache
  modsecurity-apache:
    image: ${MODSECURITY_IMAGE}
    container_name: ${MODSECURITY_CONTAINER_NAME}
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    volumes:
      - ./modsecurity-config:/etc/modsecurity.d:ro
      - ./apache-config:/etc/apache2/sites-available:ro
      - ./logs:/var/log/apache2
      - ./ssl:/etc/ssl/certs:ro
    environment:
      - MODSEC_RULE_ENGINE=${MODSEC_RULE_ENGINE}
      - MODSEC_REQ_BODY_ACCESS=${MODSEC_REQ_BODY_ACCESS}
      - MODSEC_REQ_BODY_LIMIT=${MODSEC_REQ_BODY_LIMIT}
      - MODSEC_REQ_BODY_NOFILES_LIMIT=${MODSEC_REQ_BODY_NOFILES_LIMIT}
      - MODSEC_RESP_BODY_ACCESS=${MODSEC_RESP_BODY_ACCESS}
      - MODSEC_RESP_BODY_LIMIT=${MODSEC_RESP_BODY_LIMIT}
      - BACKEND_HOST=${WEBAPP_SERVICE_NAME}
      - BACKEND_PORT=${WEBAPP_INTERNAL_PORT}
      - SERVER_NAME=${SERVER_NAME}
    depends_on:
      - webapp
    dns:
      - 192.168.15.3
    networks:
      - single-node_default
      - soar-network
    restart: ${RESTART_POLICY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/server-status"]
      interval: 30s
      timeout: 10s
      retries: 3
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.modsecurity.rule=Host(`${SERVER_NAME}`)"

  # Application web de test (DVWA)
  webapp:
    image: ${WEBAPP_IMAGE}
    container_name: ${WEBAPP_CONTAINER_NAME}
    ports:
      - "${WEBAPP_PORT}:80"
    environment:
      - MYSQL_HOSTNAME=${DB_HOST}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USERNAME=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - DVWA_DIFFICULTY=${DVWA_DIFFICULTY}
    # - DVWA_RECAPTCHA_PUBLIC_KEY=${DVWA_RECAPTCHA_PUBLIC_KEY:-}
    # - DVWA_RECAPTCHA_PRIVATE_KEY=${DVWA_RECAPTCHA_PRIVATE_KEY:-}
    depends_on:
      mysql-db:
        condition: service_healthy
    dns:
      - 192.168.15.3
    networks:
      - single-node_default
      - soar-network
    restart: ${RESTART_POLICY}
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Base de donn√©es MySQL pour DVWA
  mysql-db:
    image: ${DB_IMAGE}
    container_name: ${DB_CONTAINER_NAME}
    environment:
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASSWORD}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASSWORD}
      - MYSQL_CHARACTER_SET_SERVER=${DB_CHARSET}
      - MYSQL_COLLATION_SERVER=${DB_COLLATION}
    volumes:
      - mysql-data:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - soar-network
    restart: ${RESTART_POLICY}
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "root", "-p${DB_ROOT_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 5
    command: --default-authentication-plugin=mysql_native_password

  # Agent Wazuh pour ModSecurity
  wazuh-agent:
    image: ${WAZUH_AGENT_IMAGE}
    container_name: ${WAZUH_AGENT_CONTAINER_NAME}
    environment:
      - WAZUH_MANAGER=${WAZUH_MANAGER_IP}
      - WAZUH_MANAGER_PORT=${WAZUH_MANAGER_PORT}
      - WAZUH_PROTOCOL=${WAZUH_PROTOCOL}
      - WAZUH_REGISTRATION_SERVER=${WAZUH_REGISTRATION_SERVER}
      - WAZUH_REGISTRATION_PORT=${WAZUH_REGISTRATION_PORT}
      - WAZUH_AGENT_GROUP=${WAZUH_AGENT_GROUP}
      - WAZUH_AGENT_NAME=${WAZUH_AGENT_NAME}
      - WAZUH_KEEP_ALIVE_INTERVAL=${WAZUH_KEEP_ALIVE_INTERVAL}
      - WAZUH_TIME_RECONNECT=${WAZUH_TIME_RECONNECT}
      - WAZUH_AUTO_RESTART=${WAZUH_AUTO_RESTART}
    volumes:
      - ./wazuh-config/ossec.conf:/var/ossec/etc/ossec.conf:ro
      - ./logs:/var/log/apache2:ro
      - wazuh-agent-data:/var/ossec/var
      - ./scripts:/scripts:ro
    networks:
      - single-node_default
      - soar-network
    restart: ${RESTART_POLICY}
    dns:
      - 192.168.15.3
    depends_on:
      - modsecurity-apache
    healthcheck:
      test: ["CMD", "/var/ossec/bin/wazuh-control", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Processeur de logs et webhook forwarder
  log-processor:
    build:
      context: ./scripts
      dockerfile: Dockerfile.log-processor
    container_name: ${LOG_PROCESSOR_CONTAINER_NAME}
    environment:
      - N8N_WEBHOOK_URL=${N8N_WEBHOOK_URL}
      - WAZUH_MANAGER_API=${WAZUH_MANAGER_API}
      - WAZUH_API_USER=${WAZUH_API_USER}
      - WAZUH_API_PASSWORD=${WAZUH_API_PASSWORD:}
      - THEHIVE_URL=${THEHIVE_URL}
      - THEHIVE_API_KEY=${THEHIVE_API_KEY}
      - CORTEX_URL=${CORTEX_URL}
      - CORTEX_API_KEY=${CORTEX_API_KEY}
      - MISP_URL=${MISP_URL}
      - MISP_API_KEY=${MISP_API_KEY}
      - ALERT_THROTTLE_MINUTES=${ALERT_THROTTLE_MINUTES}
      - LOG_LEVEL=${LOG_LEVEL}
      - ANALYST_NAME=${ANALYST_NAME}
      - ENVIRONMENT=${ENVIRONMENT}
    volumes:
      - ./scripts:/scripts:ro
      - ./logs:/var/log/apache2:rw
      - ./monitoring:/monitoring:rw
      - log-processor-data:/data
    networks:
      - single-node_default
      - soar-network
    restart: ${RESTART_POLICY}
    dns:
      - 192.168.15.3
    depends_on:
      - modsecurity-apache
    healthcheck:
      test: ["CMD", "pgrep", "-f", "log-processor.sh"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Service de monitoring et healthcheck
  monitoring:
    image: ${MONITORING_IMAGE}
    container_name: ${MONITORING_CONTAINER_NAME}
    environment:
      - MONITORING_INTERVAL=${MONITORING_INTERVAL}
      - ALERT_EMAIL=${ALERT_EMAIL}
      - SMTP_SERVER=${SMTP_SERVER}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
    volumes:
      - ./monitoring:/monitoring:ro
      - ./logs:/var/log/apache2:ro
      - /var/run/docker.sock:/var/run/docker.sock:ro
    dns:
      - 192.168.15.3
    networks:
      - single-node_default
      - soar-network
    restart: ${RESTART_POLICY}
    command: /bin/sh -c "apk add --no-cache curl docker-cli python3 py3-pip && pip3 install requests && /monitoring/healthcheck.sh"

volumes:
  mysql-data:
    driver: local
    name: ${PROJECT_NAME}_mysql-data
  wazuh-agent-data:
    driver: local
    name: ${PROJECT_NAME}_wazuh-data
  log-processor-data:
    driver: local
    name: ${PROJECT_NAME}_log-processor-data

networks:
  single-node_default:
    external: true
  soar-network:
    driver: bridge
    name: ${PROJECT_NAME}_network
    ipam:
      config:
        - subnet: ${NETWORK_SUBNET}