{
    "nodes": [
        {
            "parameters": {
                "httpMethod": "POST",
                "path": "wazuh-sysmon",
                "options": {}
            },
            "name": "Wazuh Webhook",
            "type": "n8n-nodes-base.webhook",
            "typeVersion": 1,
            "position": [
                -144,
                272
            ],
            "id": "42c38984-cbbd-42db-ac6f-70e95a88f5d6",
            "webhookId": "35f89961-c366-46f1-85fb-54bb776afe75"
        },
        {
            "parameters": {
                "functionCode": "// Extract key alert information - adapt for the new structure\nconst alertJson = $input.item.json; // Assuming the whole JSON is passed to n8n\nconst alertData = alertJson.body || alertJson; // Extract from _source if present\nconst type = alertData.input?.type || \"log\";\nconst rule = alertData.rule || {};\nconst data = alertData.data || {};\nconst win = data.win || {};\nconst timestamp = alertData.timestamp ;\nconst id = alertData.id;\n\n// Extract relevant fields\nlet title = `${rule.description || 'DNS Detection Alert'}`;\n\n// Create Markdown-formatted description\nlet description = `# ${title}\\n\\n`;\ndescription += `## Alert Details\\n\\n`;\ndescription += `- **Alert Level**: ${rule.level}\\n`;\ndescription += `- **Rule ID**: ${rule.id}\\n`;\ndescription += `- **Timestamp**: ${timestamp}\\n`;\n\nif (rule.groups && Array.isArray(rule.groups)) {\n  description += `- **Rule Groups**: ${rule.groups.join(', ')}\\n\\n`;\n}\n\n// Add agent information\nconst agent = alertData.agent || {};\ndescription += `## Agent Information\\n\\n`;\ndescription += `- **Name**: ${agent.name}\\n`;\ndescription += `- **ID**: ${agent.id}\\n`;\ndescription += `- **IP Address**: ${agent.ip}\\n\\n`;\n\n// Add Windows event details\nconst eventdata = win.eventdata || {};\nconst system = win.system || {};\n\ndescription += `## Event Details\\n\\n`;\ndescription += `- **Event ID**: ${system.eventID || 'N/A'}\\n`;\ndescription += `- **Event Time**: ${eventdata.utcTime || 'N/A'}\\n`;\ndescription += `- **Computer**: ${system.computer || 'N/A'}\\n\\n`;\n\n// Extract DNS information\ndescription += `## DNS Information\\n\\n`;\nconst dnsQuery = {};\nif (eventdata.queryName) {\n  dnsQuery.domain = eventdata.queryName;\n  description += `- **DNS Query**: \\`${eventdata.queryName}\\`\\n`;\n}\n\nif (eventdata.queryResults) {\n  dnsQuery.result = eventdata.queryResults;\n  description += `- **DNS Result**: \\`${eventdata.queryResults}\\`\\n`;\n  \n  // Extract IPs from query results\n  const ipMatches = eventdata.queryResults.match(/::ffff:(\\d+\\.\\d+\\.\\d+\\.\\d+)/g) || [];\n  const resolvedIPs = ipMatches.map(ip => ip.replace('::ffff:', ''));\n  \n  if (resolvedIPs.length > 0) {\n    description += `- **Resolved IPs**:\\n`;\n    resolvedIPs.forEach(ip => {\n      description += `  - \\`${ip}\\`\\n`;\n    });\n    dnsQuery.ips = resolvedIPs;\n  }\n}\n\n// Add process information\nif (eventdata.image || eventdata.processId || eventdata.processGuid || eventdata.user) {\n  description += `\\n## Process Information\\n\\n`;\n  \n  if (eventdata.image) {\n    description += `- **Process Path**: \\`${eventdata.image}\\`\\n`;\n  }\n  \n  if (eventdata.processId) {\n    description += `- **Process ID**: ${eventdata.processId}\\n`;\n  }\n  \n  if (eventdata.processGuid) {\n    description += `- **Process GUID**: ${eventdata.processGuid}\\n`;\n  }\n  \n  if (eventdata.user) {\n    description += `- **User**: ${eventdata.user}\\n`;\n  }\n}\n\n// Add a summary section with severity information\ndescription += `\\n## Summary\\n\\n`;\nlet severityText = rule.level >= 10 ? \"HIGH\" : (rule.level >= 7 ? \"MEDIUM\" : \"LOW\");\ndescription += `This is a **${severityText} SEVERITY** DNS detection from Wazuh Sysmon monitoring. `;\ndescription += `The alert was triggered at ${new Date(timestamp).toISOString().replace('T', ' ').substring(0, 19)} UTC.`;\n\n// Create ONE main observable - the DNS domain\n// The other data will be included in the context/metadata\nconst observable = dnsQuery.domain ? {\n  dataType: 'domain',\n  data: dnsQuery.domain,\n  message: description,  // Use our new Markdown-formatted message\n  // Include context about related data\n  context: {\n    resolvedIPs: dnsQuery.ips || [],\n    processInfo: {\n      path: eventdata.image,\n      pid: eventdata.processId,\n      guid: eventdata.processGuid,\n      user: eventdata.user\n    },\n    queryResult: dnsQuery.result\n  }\n} : null;\n\n// Create tags array\nconst tagsArray = rule.groups && Array.isArray(rule.groups) ? [...rule.groups] : [];\ntagsArray.push('wazuh', 'sysmon', 'dns-query');\n\n// Add severity tags based on level\nif (rule.level >= 10) {\n  tagsArray.push('high-severity');\n} else if (rule.level >= 7) {\n  tagsArray.push('medium-severity');\n} else {\n  tagsArray.push('low-severity');\n}\n\n// Return processed data with single observable\nreturn {\n  type,\n  title,\n  id,\n  timestamp,\n  description,  // Our enhanced Markdown description\n  tlp: 2, // TLP:AMBER\n  severity: rule.level >= 12 ? 3 : (rule.level >= 7 ? 2 : 1), // Map Wazuh severity to TheHive\n  tags: tagsArray,  // Keep as array rather than comma-separated string\n  observable, // Single main observable instead of array\n  raw: alertData, // Store full alert for reference\n  source: 'wazuh-sysmon-dns'\n};"
            },
            "name": "Process Alert",
            "type": "n8n-nodes-base.function",
            "typeVersion": 1,
            "position": [
                64,
                272
            ],
            "id": "5dc12f3f-35ec-4726-8b93-1ce651a27c0a"
        },
        {
            "parameters": {
                "title": "={{$node[\"Process Alert\"].json.title}}",
                "description": "={{$node[\"Process Alert\"].json.description}}",
                "severity": "={{$node[\"Process Alert\"].json.severity}}",
                "date": "={{ $json.timestamp }}",
                "tags": "=  {{$node[\"Process Alert\"].json.tags.join()}}",
                "tlp": "={{ $json.tlp }}",
                "status": "=New",
                "type": "={{ $json.type }}",
                "source": "={{ $json.source }}",
                "sourceRef": "={{ $json.timestamp }}",
                "additionalFields": {}
            },
            "name": "Create TheHive Alert",
            "type": "n8n-nodes-base.theHive",
            "typeVersion": 1,
            "position": [
                256,
                448
            ],
            "id": "57f0c144-51e8-4df0-ba75-10f2eb907f80",
            "credentials": {
                "theHiveApi": {
                    "id": "gkwz9WkO0XfDdoRG",
                    "name": "The Hive account"
                }
            }
        },
        {
            "parameters": {
                "mode": "combine",
                "combineBy": "combineAll",
                "options": {}
            },
            "type": "n8n-nodes-base.merge",
            "typeVersion": 3.2,
            "position": [
                416,
                176
            ],
            "id": "ba7b5315-426f-45de-98b1-8a9d489eec18",
            "name": "Merge"
        },
        {
            "parameters": {
                "resource": "observable",
                "createIn": "alert",
                "id": {
                    "__rl": true,
                    "value": "={{ $json.id }}",
                    "mode": "id"
                },
                "dataType": "url",
                "data": "={{ $json.raw.alert.data.win.eventdata.queryName }}",
                "observableFields": {
                    "mappingMode": "defineBelow",
                    "value": {
                        "ioc": false,
                        "sighted": false,
                        "ignoreSimilarity": false,
                        "isZip": false,
                        "message": "={{ $json.description }}",
                        "tags": "={{ $json.tags.join() }}",
                        "tlp": "={{ $json.tlp }}"
                    },
                    "matchingColumns": [],
                    "schema": [
                        {
                            "displayName": "Start Date",
                            "id": "startDate",
                            "type": "dateTime",
                            "removed": true,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "Description",
                            "id": "message",
                            "type": "string",
                            "removed": false,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "Tags",
                            "id": "tags",
                            "type": "string",
                            "removed": false,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "TLP (Confidentiality of information)",
                            "id": "tlp",
                            "type": "options",
                            "options": [
                                {
                                    "name": "White",
                                    "value": 0
                                },
                                {
                                    "name": "Green",
                                    "value": 1
                                },
                                {
                                    "name": "Amber",
                                    "value": 2
                                },
                                {
                                    "name": "Red",
                                    "value": 3
                                }
                            ],
                            "removed": false,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "PAP (Level of exposure of information)",
                            "id": "pap",
                            "type": "options",
                            "options": [
                                {
                                    "name": "White",
                                    "value": 0
                                },
                                {
                                    "name": "Green",
                                    "value": 1
                                },
                                {
                                    "name": "Amber",
                                    "value": 2
                                },
                                {
                                    "name": "Red",
                                    "value": 3
                                }
                            ],
                            "removed": true,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "IOC",
                            "id": "ioc",
                            "type": "boolean",
                            "removed": false,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "Sighted",
                            "id": "sighted",
                            "type": "boolean",
                            "removed": false,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "Sighted At",
                            "id": "sightedAt",
                            "type": "dateTime",
                            "removed": true,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "Ignore Similarity",
                            "id": "ignoreSimilarity",
                            "type": "boolean",
                            "removed": false,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "Is Zip",
                            "id": "isZip",
                            "type": "boolean",
                            "removed": true,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        },
                        {
                            "displayName": "Zip Password",
                            "id": "zipPassword",
                            "type": "string",
                            "removed": true,
                            "required": false,
                            "display": true,
                            "defaultMatch": false
                        }
                    ],
                    "attemptToConvertTypes": false,
                    "convertFieldsToString": false
                }
            },
            "type": "n8n-nodes-base.theHiveProject",
            "typeVersion": 1,
            "position": [
                624,
                176
            ],
            "id": "a6ba1f87-967d-4d98-abc1-d08036330448",
            "name": "Create an observable",
            "credentials": {
                "theHiveProjectApi": {
                    "id": "UaXyjHsuuINMoTy0",
                    "name": "The Hive 5 account"
                }
            }
        },
        {
            "parameters": {
                "resource": "observable",
                "operation": "executeAnalyzer",
                "observableId": {
                    "__rl": true,
                    "value": "={{ $json._id }}",
                    "mode": "id"
                },
                "dataType": "={{ $json.dataType }}",
                "analyzers": [
                    "797f393dd998e724b49b040c71d26e9f::cortex"
                ]
            },
            "type": "n8n-nodes-base.theHiveProject",
            "typeVersion": 1,
            "position": [
                832,
                176
            ],
            "id": "6dac6627-4ea6-4171-b106-9452b2e158e5",
            "name": "Execute analyzer on an observable",
            "credentials": {
                "theHiveProjectApi": {
                    "id": "UaXyjHsuuINMoTy0",
                    "name": "The Hive 5 account"
                }
            }
        },
        {
            "parameters": {
                "mode": "combineBySql",
                "query": "SELECT \n  input1._id as observableId,\n  input2._id as analyseResultId\nFROM \n  input1\n  CROSS JOIN input2\nLIMIT 1",
                "options": {}
            },
            "type": "n8n-nodes-base.merge",
            "typeVersion": 3.2,
            "position": [
                1200,
                0
            ],
            "id": "69fe84d6-be3a-47b0-9b0d-0f8a137ac447",
            "name": "Merge1"
        },
        {
            "parameters": {
                "resource": "observable",
                "operation": "get",
                "observableId": {
                    "__rl": true,
                    "value": "={{ $json.observableId }}",
                    "mode": "id"
                }
            },
            "type": "n8n-nodes-base.theHiveProject",
            "typeVersion": 1,
            "position": [
                1392,
                176
            ],
            "id": "f479f4d1-de27-4a0a-a157-9931d366b4a8",
            "name": "Get an observable",
            "credentials": {
                "theHiveProjectApi": {
                    "id": "UaXyjHsuuINMoTy0",
                    "name": "The Hive 5 account"
                }
            }
        },
        {
            "parameters": {
                "jsCode": "// Function Node: Process Observable Results\nconst observable = $input.first().json; // Get the first item\nconst alertId = $('Merge').first().json.id\n\n\n// Get both report sources\nconst localReport = observable.reports || {};\nconst analyzerReport = $('Execute analyzer on an observable').first().json?.report || {};\n\n// Function to analyze reports and determine threat level\nfunction analyzeReports(reports) {\n  let highestThreatLevel = \"info\";\n  let hasEvents = false;\n  const findings = [];\n  \n  // Helper function to update threat level\n  function updateThreatLevel(level) {\n    if (level === \"malicious\" || level === \"high\" || level === \"1\") {\n      highestThreatLevel = \"high\";\n    } else if ((level === \"suspicious\" || level === \"medium\" || level === \"2\") && highestThreatLevel !== \"high\") {\n      highestThreatLevel = \"medium\";\n    } else if ((level === \"warning\" || level === \"low\" || level === \"3\") && highestThreatLevel === \"info\") {\n      highestThreatLevel = \"low\";\n    }\n  }\n  \n  // Process MISP format taxonomies (from observable reports)\n  if (reports.localReport) {\n    Object.entries(reports.localReport).forEach(([analyzerName, report]) => {\n      if (report?.taxonomies && Array.isArray(report.taxonomies)) {\n        report.taxonomies.forEach(taxonomy => {\n          // Track findings safely\n          const finding = {\n            analyzer: analyzerName,\n            source: \"Observable Report\"\n          };\n          \n          // Add properties if they exist\n          if (taxonomy.predicate) finding.type = taxonomy.predicate;\n          if (taxonomy.value) finding.value = taxonomy.value;\n          if (taxonomy.level) finding.level = taxonomy.level;\n          if (taxonomy.namespace) finding.namespace = taxonomy.namespace;\n          \n          findings.push(finding);\n          \n          // Check for events/matches\n          if (taxonomy.value && !taxonomy.value.includes(\"0 events\")) {\n            hasEvents = true;\n            updateThreatLevel(taxonomy.level);\n            \n            // Extract event count if available\n            const eventMatch = taxonomy.value.match(/(\\d+)\\s*event/);\n            if (eventMatch && eventMatch[1]) {\n              const eventCount = parseInt(eventMatch[1]);\n              if (eventCount >= 3) updateThreatLevel(\"high\");\n              else if (eventCount >= 1) updateThreatLevel(\"medium\");\n            }\n          }\n        });\n      }\n      \n      // Check for summary info\n      if (report?.summary && Object.keys(report.summary).length > 0) {\n        hasEvents = true;\n        findings.push({\n          analyzer: analyzerName,\n          source: \"Observable Report\",\n          summary: report.summary\n        });\n        \n        if (highestThreatLevel === \"info\") highestThreatLevel = \"low\";\n      }\n    });\n  }\n  \n  // Process analyzer report (Execute analyzer on an observable)\n  if (reports.analyzerReport) {\n    const analyzerName = reports.analyzerReport.analyzerName || \"Unknown Analyzer\";\n    \n    // Handle MISP-specific full report format\n    if (reports.analyzerReport.full?.results) {\n      try {\n        // Safely navigate through potential results array\n        reports.analyzerReport.full.results.forEach(resultItem => {\n          if (resultItem?.result && Array.isArray(resultItem.result)) {\n            resultItem.result.forEach(item => {\n              hasEvents = true;\n              \n              const finding = {\n                analyzer: analyzerName,\n                source: resultItem.name || \"External Analysis\"\n              };\n              \n              // Add all available fields from the item\n              if (item.id) finding.event_id = item.id;\n              if (item.info) finding.info = item.info;\n              if (item.threat_level_id) finding.threat_level_id = item.threat_level_id;\n              if (item.date) finding.date = item.date;\n              if (item.Orgc?.name) finding.organization = item.Orgc.name;\n              if (item.Tag && Array.isArray(item.Tag)) {\n                finding.tags = item.Tag.map(tag => tag.name).join(', ');\n              }\n              \n              findings.push(finding);\n              \n              // Update threat level based on the MISP threat level ID\n              if (item.threat_level_id) {\n                updateThreatLevel(item.threat_level_id.toString());\n              }\n            });\n          }\n        });\n      } catch (e) {\n        // Add error finding if something goes wrong\n        findings.push({\n          analyzer: analyzerName,\n          source: \"Error\",\n          error: \"Failed to process analyzer report\",\n          details: e.message\n        });\n      }\n    }\n    \n    // Also check for taxonomies in the analyzer report\n    if (reports.analyzerReport.taxonomies && Array.isArray(reports.analyzerReport.taxonomies)) {\n      reports.analyzerReport.taxonomies.forEach(taxonomy => {\n        const finding = {\n          analyzer: analyzerName,\n          source: \"Analyzer Report\"\n        };\n        \n        if (taxonomy.predicate) finding.type = taxonomy.predicate;\n        if (taxonomy.value) finding.value = taxonomy.value;\n        if (taxonomy.level) finding.level = taxonomy.level;\n        \n        findings.push(finding);\n        \n        if (taxonomy.value && !taxonomy.value.includes(\"0 events\")) {\n          hasEvents = true;\n          updateThreatLevel(taxonomy.level);\n        }\n      });\n    }\n  }\n  \n  return { threatLevel: highestThreatLevel, hasEvents, findings };\n}\n\n// Process both report sources\nconst analysis = analyzeReports({\n  localReport: localReport,\n  analyzerReport: analyzerReport\n});\n\nconst createCase = analysis.hasEvents || analysis.threatLevel !== \"info\";\n\n\n\nreturn {\n  analysis:analysis,\n  observable: observable._id,\n  threatLevel: analysis.threatLevel,\n  createCase: createCase,\n  hasEvents: analysis.hasEvents,\n  findings: analysis.findings,\n  // Information for updating the alert\n  alertUpdate: {\n    id:alertId,\n    tags: [...observable.tags, `threatLevel:${analysis.threatLevel}`],\n    status: createCase ? \"New\" : \"Ignored\",\n    follow: createCase\n  }\n};"
            },
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                1648,
                176
            ],
            "id": "7ccf9acc-ebad-4515-b75a-e3f4114b35ee",
            "name": "Code"
        },
        {
            "parameters": {
                "fromEmail": "admin@sbihi.soar.ma",
                "toEmail": "={{ $json.email.to }}",
                "subject": "={{ $json.email.subject }}",
                "html": "={{ $json.email.body }}",
                "options": {}
            },
            "type": "n8n-nodes-base.emailSend",
            "typeVersion": 2.1,
            "position": [
                2896,
                144
            ],
            "id": "722eca37-c574-4207-8bfb-d951b79b4fb1",
            "name": "Send email",
            "webhookId": "a8fa8078-4f8a-499c-b12b-ae2b191004a8",
            "credentials": {
                "smtp": {
                    "id": "zCBfpjwyWbps8Afk",
                    "name": "SMTP account"
                }
            }
        },
        {
            "parameters": {
                "operation": "status",
                "alertId": {
                    "__rl": true,
                    "value": "={{ $json.alertUpdate.id }}",
                    "mode": "id"
                },
                "status": "={{ $json.alertUpdate.status }}"
            },
            "type": "n8n-nodes-base.theHiveProject",
            "typeVersion": 1,
            "position": [
                2272,
                544
            ],
            "id": "1798ee46-e243-471a-b84f-15e722689ba9",
            "name": "Update an alert status (false positive)",
            "credentials": {
                "theHiveProjectApi": {
                    "id": "UaXyjHsuuINMoTy0",
                    "name": "The Hive 5 account"
                }
            }
        },
        {
            "parameters": {
                "operation": "promote",
                "id": "={{$node[\"Create TheHive Alert\"].json.id}}",
                "additionalFields": {}
            },
            "name": "Update TheHive Alert  to case",
            "type": "n8n-nodes-base.theHive",
            "typeVersion": 1,
            "position": [
                2096,
                -32
            ],
            "id": "0760b77e-88f2-4aec-88cd-33babc53fd48",
            "credentials": {
                "theHiveApi": {
                    "id": "gkwz9WkO0XfDdoRG",
                    "name": "The Hive account"
                }
            }
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "caseSensitive": true,
                        "leftValue": "",
                        "typeValidation": "strict",
                        "version": 2
                    },
                    "conditions": [
                        {
                            "id": "3bc2b9e4-dd78-4612-8a77-7dcfba79539f",
                            "leftValue": "={{ $json.createCase }}",
                            "rightValue": "",
                            "operator": {
                                "type": "boolean",
                                "operation": "true",
                                "singleValue": true
                            }
                        }
                    ],
                    "combinator": "and"
                },
                "options": {}
            },
            "type": "n8n-nodes-base.if",
            "typeVersion": 2.2,
            "position": [
                1856,
                176
            ],
            "id": "b5ad7204-c0ee-4e43-8942-7ed1a736aee5",
            "name": "If vrai positive"
        },
        {
            "parameters": {
                "jsCode": "// Function to generate a better-looking HTML email\n\n\nconst alertId = $('Merge').first().json.id\nconst analysis=$input.first().json.analysis\nconst observable = $(\"Get an observable\").first().json\n\nconst generateEmail = () => {\n  const date = new Date().toISOString();\n  \n  // Define threat level colors and styles\n  const threatColors = {\n    \"high\": \"#e74c3c\",\n    \"medium\": \"#f39c12\",\n    \"low\": \"#3498db\",\n    \"info\": \"#2ecc71\"\n  };\n  \n  const threatEmoji = {\n    \"high\": \"🔴\",\n    \"medium\": \"🟠\",\n    \"low\": \"🟡\",\n    \"info\": \"🔵\"\n  };\n  \n    let subject = `${threatEmoji[analysis.threatLevel]} ${analysis.threatLevel.toUpperCase()} Analysis Result: ${observable.data} (${observable.dataType})`;\n  \n  // Generate HTML tags with better styling\n  const tagsHtml = observable.tags.map(tag => \n    `<span style=\"display:inline-block;background:#f8f9fa;color:#3498db;border:1px solid #3498db;border-radius:12px;padding:2px 8px;margin:2px;font-size:12px;\">${tag}</span>`\n  ).join(' ');\n  \n  // Format the message with proper HTML escaping\n  const escapedMessage = observable.message\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;')\n    .replace(/\\n/g, '<br>');\n  \n  // Build the HTML email body with improved styling\n  let body = `\n<!DOCTYPE html>\n<html>\n<head>\n  <meta charset=\"UTF-8\">\n</head>\n<body style=\"font-family:Helvetica,Arial,sans-serif;line-height:1.6;color:#333;max-width:800px;margin:0 auto;padding:20px;background-color:#f9f9f9;\">\n\n  <!-- Header -->\n  <div style=\"background-color:${threatColors[analysis.threatLevel]};color:white;padding:15px 20px;border-radius:5px 5px 0 0;margin-bottom:0;\">\n    <h1 style=\"margin:0;font-size:24px;\">Security Analysis Results</h1>\n    <p style=\"margin:5px 0 0;font-size:14px;\">Analysis completed at ${new Date(date).toLocaleString()}</p>\n  </div>\n\n  <!-- Main Content -->\n  <div style=\"background-color:white;padding:20px;border-radius:0 0 5px 5px;box-shadow:0 2px 10px rgba(0,0,0,0.1);\">\n    \n    <!-- Observable Information -->\n    <h2 style=\"color:#2c3e50;border-bottom:2px solid #ecf0f1;padding-bottom:8px;font-size:18px;\">Observable Information</h2>\n    <table style=\"width:100%;border-collapse:collapse;margin-bottom:20px;\">\n      <tr>\n        <th style=\"text-align:left;padding:8px 12px;background-color:#f8f9fa;width:120px;font-weight:600;border:1px solid #ddd;\">Type</th>\n        <td style=\"padding:8px 12px;border:1px solid #ddd;\">${observable.dataType}</td>\n      </tr>\n      <tr>\n        <th style=\"text-align:left;padding:8px 12px;background-color:#f8f9fa;font-weight:600;border:1px solid #ddd;\">Value</th>\n        <td style=\"padding:8px 12px;border:1px solid #ddd;font-family:monospace;font-size:14px;word-break:break-all;\">${observable.data}</td>\n      </tr>\n      <tr>\n        <th style=\"text-align:left;padding:8px 12px;background-color:#f8f9fa;font-weight:600;border:1px solid #ddd;\">TLP</th>\n        <td style=\"padding:8px 12px;border:1px solid #ddd;\">\n          <span style=\"display:inline-block;background-color:#F7B500;color:white;padding:2px 8px;border-radius:3px;font-size:12px;font-weight:bold;\">${observable.tlpLabel}</span>\n        </td>\n       \n      </tr>\n      <tr>\n        <th style=\"text-align:left;padding:8px 12px;background-color:#f8f9fa;font-weight:600;border:1px solid #ddd;\">Tags</th>\n        <td style=\"padding:8px 12px;border:1px solid #ddd;\">${tagsHtml}</td>\n      </tr>\n      <tr>\n       <th style=\"text-align:left;padding:8px 12px;background-color:#f8f9fa;font-weight:600;border:1px solid #ddd;\">INFO</th>\n      \n       <td style=\"padding:8px 12px;border:1px solid #ddd;\"> ${$('Execute analyzer on an observable').first().json.report.full.results[0].result[0]?.info||\"--------------\"} </td>\n      </tr>\n    </table>\n\n    <!-- Analysis Results -->\n    <h2 style=\"color:#2c3e50;border-bottom:2px solid #ecf0f1;padding-bottom:8px;font-size:18px;margin-top:30px;\">Analysis Results</h2>\n    <table style=\"width:100%;border-collapse:collapse;margin-bottom:20px;\">\n      <tr>\n        <th style=\"text-align:left;padding:8px 12px;background-color:#f8f9fa;width:120px;font-weight:600;border:1px solid #ddd;\">Threat Level</th>\n        <td style=\"padding:8px 12px;border:1px solid #ddd;\">\n          <span style=\"display:inline-block;background-color:${threatColors[analysis.threatLevel]};color:white;padding:4px 10px;border-radius:3px;font-weight:bold;\">${analysis.threatLevel.toUpperCase()}</span>\n        </td>\n      </tr>\n      <tr>\n        <th style=\"text-align:left;padding:8px 12px;background-color:#f8f9fa;font-weight:600;border:1px solid #ddd;\">Analysis Time</th>\n        <td style=\"padding:8px 12px;border:1px solid #ddd;\">${new Date(date).toLocaleString()}</td>\n      </tr>\n    </table>`;\n\n  // Add findings details with improved styling\n  if (analysis.findings.length > 0) {\n    body += `<h2 style=\"color:#2c3e50;border-bottom:2px solid #ecf0f1;padding-bottom:8px;font-size:18px;margin-top:30px;\">Detailed Findings</h2>`;\n    \n    analysis.findings.forEach((finding, index) => {\n      body += `\n      <div style=\"margin-bottom:20px;background-color:#f8f9fa;border-left:4px solid #3498db;padding:15px;border-radius:0 5px 5px 0;\">\n        <h3 style=\"margin-top:0;color:#2980b9;font-size:16px;\">Finding ${index + 1}</h3>\n        <ul style=\"margin:0;padding-left:20px;\">`;\n      \n     Object.entries(finding).forEach(([key, value]) => {\n      // Safe handling of all value types including undefined\n      let displayValue;\n      \n      if (value === undefined || value === null) {\n        displayValue = \"(none)\";\n      } else if (typeof value === 'string') {\n        displayValue = value.replace(/\"/g, '');\n      } else {\n        try {\n          displayValue = JSON.stringify(value).replace(/\"/g, '');\n        } catch (e) {\n          displayValue = \"(unprintable value)\";\n        }\n      }\n        \n      body += `<li style=\"margin-bottom:5px;\"><strong>${key}</strong>: ${displayValue}</li>`;\n    });\n      \n      body += `</ul></div>`;\n    });\n  } else {\n    body += `\n    <div style=\"margin:20px 0;padding:15px;background-color:#f8f9fa;border-left:4px solid #2ecc71;border-radius:0 5px 5px 0;\">\n      <em>No specific findings were reported by analyzers</em>\n    </div>`;\n  }\n\n  // Add alert source with improved code block styling\n  body += `\n    <h2 style=\"color:#2c3e50;border-bottom:2px solid #ecf0f1;padding-bottom:8px;font-size:18px;margin-top:30px;\">Original Alert</h2>\n    <div style=\"background-color:#f8f9fa;border:1px solid #ddd;border-radius:5px;padding:15px;margin:10px 0;font-family:monospace;font-size:13px;overflow:auto;white-space:pre-wrap;\">${escapedMessage}</div>\n\n    <!-- Action Links -->\n    <div style=\"margin:30px 0;text-align:center;\">\n      <a href=\"http://thehive.sbihi.soar.ma/alerts/${alertId}/details\" style=\"display:inline-block;margin:0 10px;padding:10px 20px;background-color:#3498db;color:white;text-decoration:none;border-radius:5px;font-weight:bold;\">View in TheHive</a>`;\n\n  if ($input.first().json.createCase) {\n    body += `\n      <a href=\"http://thehive.sbihi.soar.ma/cases/${$input.first().json._id}/details\" style=\"display:inline-block;margin:0 10px;padding:10px 20px;background-color:#2ecc71;color:white;text-decoration:none;border-radius:5px;font-weight:bold;\">View Case</a>`;\n  }\n\n  body += `\n    </div>\n  </div>\n  \n  <!-- Footer -->\n  <div style=\"text-align:center;margin-top:20px;padding:15px;font-size:12px;color:#7f8c8d;\">\n    <p>This is an automated security alert. Please do not reply to this email.</p>\n    <p style=\"margin:5px 0 0;\">Generated at ${new Date(date).toLocaleString()} by SBIHI SOAR Platform</p>\n  </div>\n</body>\n</html>`;\n\n  return { subject, body };\n};\n// Build complete response\nconst emailContent = generateEmail();\n\nreturn{\n  \n email: {\n    to: \"soc-team@sbihi.soar.ma\", \n    subject: emailContent.subject,\n    body: emailContent.body,\n    contentType: \"text/html\" // Important: specify HTML content type\n  },\n}"
            },
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                2688,
                144
            ],
            "id": "391e0e0c-a521-4244-a542-e872f7c03748",
            "name": "Code1"
        },
        {
            "parameters": {
                "mode": "combine",
                "combineBy": "combineAll",
                "options": {}
            },
            "type": "n8n-nodes-base.merge",
            "typeVersion": 3.2,
            "position": [
                2288,
                144
            ],
            "id": "b821d912-b698-4661-b08b-7c8712c2fe8a",
            "name": "Merge2"
        },
        {
            "parameters": {
                "chatId": "@SOC_Team",
                "text": "=      **🚨 Alert Detected!**\n      Click a button to respond,\n==========================================================\n⌚ **date** : {{ $json.analysis.findings[1].date }}\n🎚️ **Thred Level** : {{ $json.analysis.threatLevel }}\nℹ️ **Info**: {{ $json.analysis.findings[1].info }}",
                "replyMarkup": "inlineKeyboard",
                "inlineKeyboard": {
                    "rows": [
                        {
                            "row": {
                                "buttons": [
                                    {
                                        "text": "👁️ See the Alert",
                                        "additionalFields": {
                                            "url": "=http://thehive.sbihi.soar.ma/alerts/{{$('Merge').first().json.id}}/details"
                                        }
                                    },
                                    {
                                        "text": "👁️ See the case",
                                        "additionalFields": {
                                            "url": "=http://thehive.sbihi.soar.ma/cases/{{ $json._id }}/details"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "additionalFields": {}
            },
            "type": "n8n-nodes-base.telegram",
            "typeVersion": 1.2,
            "position": [
                2704,
                -80
            ],
            "id": "63ef6baa-dfbe-4fd3-9295-8c2eed0b473d",
            "name": "Send a text message",
            "webhookId": "07bc29de-cd08-4e3e-9dcc-fd96be7574ba",
            "credentials": {
                "telegramApi": {
                    "id": "LOwniAO8FUxNCyIK",
                    "name": "Telegram account"
                }
            },
            "onError": "continueRegularOutput"
        },
        {
            "parameters": {
                "conditions": {
                    "options": {
                        "caseSensitive": true,
                        "leftValue": "",
                        "typeValidation": "strict",
                        "version": 2
                    },
                    "conditions": [
                        {
                            "id": "ec487373-7a6e-4840-b510-819dba16d586",
                            "leftValue": "={{ $json.status }}",
                            "rightValue": "Failure",
                            "operator": {
                                "type": "string",
                                "operation": "notEquals"
                            }
                        }
                    ],
                    "combinator": "and"
                },
                "options": {}
            },
            "type": "n8n-nodes-base.if",
            "typeVersion": 2.2,
            "position": [
                1040,
                176
            ],
            "id": "5e3d8325-6fad-44ee-a222-dfeff26a088f",
            "name": "If"
        },
        {
            "parameters": {
                "jsCode": "// n8n Code node (JavaScript)\nconst html = `\n<html>\n  <head>\n    <style>\n      body { font-family: Arial, sans-serif; background: #f9f9f9; }\n      .container {\n        max-width: 600px;\n        margin: auto;\n        background: #fff;\n        border-radius: 8px;\n        box-shadow: 0 2px 8px #eee;\n        padding: 24px;\n      }\n      .alert {\n        color: #fff;\n        background: #c0392b;\n        padding: 12px 20px;\n        border-radius: 5px;\n        font-size: 18px;\n        margin-bottom: 20px;\n        text-align: center;\n      }\n      .details {\n        color: #444;\n        margin-bottom: 12px;\n      }\n      .footer {\n        font-size: 12px;\n        color: #aaa;\n        margin-top: 30px;\n        text-align: center;\n      }\n    </style>\n  </head>\n  <body>\n    <div class=\"container\">\n      <div class=\"alert\">\n        <strong>ALERT:</strong> Analyzer Service is DOWN\n      </div>\n      <div class=\"details\">\n        Dear SOC Team,<br><br>\n        The analyzer service has just been detected as <strong>unavailable</strong>.<br>\n        Please investigate and restore service as soon as possible.\n      </div>\n      <div class=\"footer\">\n        This is an automated alert from your monitoring system.\n      </div>\n    </div>\n  </body>\n</html>\n`;\nconst markdown = `\n🛑 **Analyzer DOWN!**\n\nHello SOC Team,\n\nThe analyzer service has been detected as **unavailable**.\n\nPlease investigate and restore service as soon as possible.\n\n\n\n_Sent by Monitoring System • ${new Date().toLocaleString()}_\n`;\n\nreturn { html ,markdown};\n\n\n\n"
            },
            "type": "n8n-nodes-base.code",
            "typeVersion": 2,
            "position": [
                1232,
                464
            ],
            "id": "1e55453e-72d1-4e6e-9cb1-924dbd4062b4",
            "name": "Code2"
        },
        {
            "parameters": {
                "fromEmail": "admin@sbihi.soar.ma",
                "toEmail": "soc-team@sbihi.soar.ma",
                "subject": "The analyzer is down",
                "html": "={{ $json.html }}",
                "options": {}
            },
            "type": "n8n-nodes-base.emailSend",
            "typeVersion": 2.1,
            "position": [
                1440,
                464
            ],
            "id": "5493c4a6-2203-4f99-aa11-bf02e8fba900",
            "name": "Send email1",
            "webhookId": "e2a96594-e727-4122-988f-db84842e6923",
            "credentials": {
                "smtp": {
                    "id": "zCBfpjwyWbps8Afk",
                    "name": "SMTP account"
                }
            }
        },
        {
            "parameters": {
                "chatId": "@SOC_Team",
                "text": "={{ $json.markdown }}",
                "replyMarkup": "inlineKeyboard",
                "inlineKeyboard": {
                    "rows": [
                        {
                            "row": {
                                "buttons": [
                                    {
                                        "text": "Manage all servers",
                                        "additionalFields": {
                                            "url": "=https://portainer.sbihi.soar.ma"
                                        }
                                    }
                                ]
                            }
                        }
                    ]
                },
                "additionalFields": {}
            },
            "type": "n8n-nodes-base.telegram",
            "typeVersion": 1.2,
            "position": [
                1440,
                672
            ],
            "id": "8405196d-62f3-4ecb-829f-03d4071dcf29",
            "name": "Send a text message1",
            "webhookId": "07bc29de-cd08-4e3e-9dcc-fd96be7574ba",
            "credentials": {
                "telegramApi": {
                    "id": "LOwniAO8FUxNCyIK",
                    "name": "Telegram account"
                }
            },
            "onError": "continueRegularOutput"
        }
    ],
    "connections": {
        "Wazuh Webhook": {
            "main": [
                [
                    {
                        "node": "Process Alert",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Process Alert": {
            "main": [
                [
                    {
                        "node": "Create TheHive Alert",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Merge",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Create TheHive Alert": {
            "main": [
                [
                    {
                        "node": "Merge",
                        "type": "main",
                        "index": 1
                    }
                ]
            ]
        },
        "Merge": {
            "main": [
                [
                    {
                        "node": "Create an observable",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Create an observable": {
            "main": [
                [
                    {
                        "node": "Execute analyzer on an observable",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Merge1",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Execute analyzer on an observable": {
            "main": [
                [
                    {
                        "node": "If",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Merge1": {
            "main": [
                [
                    {
                        "node": "Get an observable",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Get an observable": {
            "main": [
                [
                    {
                        "node": "Code",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Code": {
            "main": [
                [
                    {
                        "node": "If vrai positive",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Send email": {
            "main": [
                []
            ]
        },
        "Update TheHive Alert  to case": {
            "main": [
                [
                    {
                        "node": "Merge2",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "If vrai positive": {
            "main": [
                [
                    {
                        "node": "Update TheHive Alert  to case",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Merge2",
                        "type": "main",
                        "index": 1
                    }
                ],
                [
                    {
                        "node": "Update an alert status (false positive)",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Code1": {
            "main": [
                [
                    {
                        "node": "Send email",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Merge2": {
            "main": [
                [
                    {
                        "node": "Code1",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Send a text message",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "If": {
            "main": [
                [
                    {
                        "node": "Merge1",
                        "type": "main",
                        "index": 1
                    }
                ],
                [
                    {
                        "node": "Code2",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        },
        "Code2": {
            "main": [
                [
                    {
                        "node": "Send email1",
                        "type": "main",
                        "index": 0
                    },
                    {
                        "node": "Send a text message1",
                        "type": "main",
                        "index": 0
                    }
                ]
            ]
        }
    },
    "pinData": {
        "Wazuh Webhook": [
            {
                "headers": {
                    "host": "sbihi.soar.ma:5678",
                    "user-agent": "python-requests/2.32.2",
                    "accept-encoding": "gzip, deflate",
                    "accept": "*/*",
                    "connection": "keep-alive",
                    "content-type": "application/json",
                    "content-length": "2261"
                },
                "params": {},
                "query": {},
                "body": {
                    "alert": {
                        "timestamp": "2025-07-23T23:21:30.683+0000",
                        "rule": {
                            "level": 8,
                            "description": "Sysmon - Event ID 22: DNSEvent (DNS query)",
                            "id": "61650",
                            "firedtimes": 13,
                            "mail": false,
                            "groups": [
                                "sysmon",
                                "sysmon_eid20_detections",
                                "windows",
                                "sysmon_event_22"
                            ]
                        },
                        "agent": {
                            "id": "002",
                            "name": "win10",
                            "ip": "192.168.1.11"
                        },
                        "manager": {
                            "name": "wazuh.manager"
                        },
                        "id": "1753312890.228553364",
                        "decoder": {
                            "name": "windows_eventchannel"
                        },
                        "data": {
                            "win": {
                                "system": {
                                    "providerName": "Microsoft-Windows-Sysmon",
                                    "providerGuid": "{5770385f-c22a-43e0-bf4c-06f5698ffbd9}",
                                    "eventID": "22",
                                    "version": "5",
                                    "level": "4",
                                    "task": "22",
                                    "opcode": "0",
                                    "keywords": "0x8000000000000000",
                                    "systemTime": "2025-07-23T23:21:29.4841989Z",
                                    "eventRecordID": "24168",
                                    "processID": "2712",
                                    "threadID": "4136",
                                    "channel": "Microsoft-Windows-Sysmon/Operational",
                                    "computer": "DESKTOP-75QULTD",
                                    "severityValue": "INFORMATION",
                                    "message": "\"Dns query:\r\nRuleName: -\r\nUtcTime: 2025-07-23 23:21:25.043\r\nProcessGuid: {556f7319-64e4-6881-ed00-000000002700}\r\nProcessId: 960\r\nQueryName: www.msftconnecttest.com\r\nQueryStatus: 0\r\nQueryResults: type:  5 ncsi-geo.trafficmanager.net;type:  5 www.msftncsi.com.edgesuite.net;type:  5 a1961.g2.akamai.net;::ffff:95.101.110.203;::ffff:95.101.110.200;::ffff:95.101.110.196;\r\nImage: C:\\Tools\\internet_detector\\internet_detector.exe\r\nUser: DESKTOP-75QULTD\\pc\""
                                },
                                "eventdata": {
                                    "utcTime": "2025-07-23 23:21:25.043",
                                    "processGuid": "{556f7319-64e4-6881-ed00-000000002700}",
                                    "processId": "960",
                                    "queryName": "http://23.227.163.110/locker.php",
                                    "queryStatus": "0",
                                    "queryResults": "type:  5 ncsi-geo.trafficmanager.net;type:  5 www.msftncsi.com.edgesuite.net;type:  5 a1961.g2.akamai.net;::ffff:95.101.110.203;::ffff:95.101.110.200;::ffff:95.101.110.196;",
                                    "image": "C:\\\\Tools\\\\internet_detector\\\\internet_detector.exe",
                                    "user": "DESKTOP-75QULTD\\\\pc"
                                }
                            }
                        },
                        "location": "EventChannel"
                    },
                    "timestamp": "2025-07-23T23:21:31.746755",
                    "source": "wazuh-dns-monitor",
                    "dns_data": {
                        "query": "www.msftconnecttest.com",
                        "results": "type:  5 ncsi-geo.trafficmanager.net;type:  5 www.msftncsi.com.edgesuite.net;type:  5 a1961.g2.akamai.net;::ffff:95.101.110.203;::ffff:95.101.110.200;::ffff:95.101.110.196;",
                        "time": "2025-07-23 23:21:25.043"
                    }
                },
                "webhookUrl": "http://sbihi.soar.ma:5678/webhook/wazuh-sysmon",
                "executionMode": "production"
            }
        ]
    },
    "meta": {
        "templateCredsSetupCompleted": true,
        "instanceId": "bfdb948841afc0ce6bec55b394199f16ae888966216c89472d4c9df5a77cd278"
    }
}